buildscript {
    repositories {
        maven { 
            url = 'https://files.minecraftforge.net/maven' 
        }
        jcenter()
        mavenCentral()
        maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}


plugins {
  id "com.gradle.build-scan" version "1.9"
  id "com.matthewprenger.cursegradle" version "1.1.0"
  id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
  //id "net.kyori.blossom" version "1.1.0"
}
apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply from: "gradle/scripts/getbuildnumber.gradle"
//apply from: "gradle/scripts/version.gradle"
version = "${project.mcversion}-${version_major}.${version_minor}.${version_revis}" + project.getBuildNumber()

group= "zmaster587.advancedRocketry" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AdvancedRocketry"
sourceCompatibility = 8
targetCompatibility = 8


apply from: "gradle/scripts/deps.gradle"

jar {
        manifest {
        attributes 'FMLCorePlugin': 'zmaster587.advancedRocketry.asm.AdvancedRocketryPlugin'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

apply from: "gradle/scripts/jars.gradle"

import org.apache.tools.ant.filters.ReplaceTokens

processResources
{
    // this will ensure that this task is redone when the versions change.
    /*inputs.property "version", project.version
    inputs.property "mcversion", mcversion
    inputs.project "@MAJOR@", project.version_major
    inputs.project "@MINOR@", project.version_minor
    inputs.project "@REVIS@", project.version_revis
    inputs.project "@build@", project.getBuildNumber()
    inputs.project "%LIBVULPESVERSION%", project.libVulpesVersion*/



    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'AdvancedRocketry.java'
        //expand version:project.version, mcversion:mcversion, MAJOR:project.version_major, MINOR:project.version_minor, REVIS:project.version_revis, build:project.getBuildNumber(), LIBVULPESVERSION:project.libVulpesVersion]
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':mcversion, '@MAJOR@':project.version_major, '@MINOR@':project.version_minor, '@REVIS@':project.version_revis, '@build@':project.getBuildNumber(), '%LIBVULPESVERSION%':project.libVulpesVersion
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

curseforge{
  if (project.hasProperty("thecursedkey")) {
        apiKey = project.thecursedkey
    }
    else {
    apiKey = ""
    }
  project {
  //AdvancedRocketry
    id = "236542"
    relations {
        requiredDependency 'libvulpes'
    }
    changelog = file('changelog.html')
    changelogType = 'html'
    releaseType = "beta"
    addGameVersion mcversion
    mainArtifact(jar) {
      displayName = "AdvancedRocketry ${project.version} build " + project.getBuildNumber() +  " for " + mcversion
    }
    addArtifact (deobfJar){
    	 displayName = "AdvancedRocketry ${project.version}-deobf build " + project.getBuildNumber() + " for " + mcversion
    }
   }
}

// Commented out until jenkins supports newer verisons of java
task makeChangelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File ("changelog.html")
    untaggedName = "Current release ${project.version}"
    
    //Get the last commit from the cache or config if no cache exists
    File newFile = rootProject.file('lasthash.txt')
    if (!newFile.exists()) fromCommit = startGitRev
    else fromCommit = newFile.text.trim()
    
    //get the latest commit and write it to the cache file
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    newFile.delete()
    newFile << stdout.toString().trim()
    
    toRef =  "HEAD"
    gitHubIssuePattern = "nonada123";
    templateContent = """
{{#tags}}
  <h3>{{name}}</h3>
  <ul>
    {{#commits}}
    <li> <a href="https://github.com/zmaster587/AdvancedRocketry/commit/{{hash}}" target=_blank> {{{message}}}</a>
</li>
    {{/commits}}
  </ul>
{{/tags}}
"""
}

tasks.build.dependsOn makeChangelog

/*buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service' 
    licenseAgree = 'yes'                                        

    publishAlways() 

    if (System.getenv('CI')) {
        tag 'CI'
    } else {
        tag 'Local'
    }

    //tag System.getProperty('os.name')                                            
}*/

